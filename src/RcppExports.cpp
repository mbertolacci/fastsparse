// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// fast_add
S4 fast_add(S4 a, S4 b);
RcppExport SEXP _fastsparse_fast_add(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< S4 >::type a(aSEXP);
    Rcpp::traits::input_parameter< S4 >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_add(a, b));
    return rcpp_result_gen;
END_RCPP
}
// fast_add2
S4 fast_add2(S4 a, S4 b);
RcppExport SEXP _fastsparse_fast_add2(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< S4 >::type a(aSEXP);
    Rcpp::traits::input_parameter< S4 >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_add2(a, b));
    return rcpp_result_gen;
END_RCPP
}
// fast_add3
SEXP fast_add3(Rcpp::S4 a_, Rcpp::S4 b_);
RcppExport SEXP _fastsparse_fast_add3(SEXP a_SEXP, SEXP b_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type a_(a_SEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type b_(b_SEXP);
    rcpp_result_gen = Rcpp::wrap(fast_add3(a_, b_));
    return rcpp_result_gen;
END_RCPP
}
// fast_kronecker
S4 fast_kronecker(S4 a, S4 b);
RcppExport SEXP _fastsparse_fast_kronecker(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< S4 >::type a(aSEXP);
    Rcpp::traits::input_parameter< S4 >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_kronecker(a, b));
    return rcpp_result_gen;
END_RCPP
}
// fast_kronecker_sym
S4 fast_kronecker_sym(S4 a, S4 b);
RcppExport SEXP _fastsparse_fast_kronecker_sym(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< S4 >::type a(aSEXP);
    Rcpp::traits::input_parameter< S4 >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_kronecker_sym(a, b));
    return rcpp_result_gen;
END_RCPP
}
// spdt_cholesky
List spdt_cholesky(NumericVector diag, NumericVector subDiag);
RcppExport SEXP _fastsparse_spdt_cholesky(SEXP diagSEXP, SEXP subDiagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type diag(diagSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type subDiag(subDiagSEXP);
    rcpp_result_gen = Rcpp::wrap(spdt_cholesky(diag, subDiag));
    return rcpp_result_gen;
END_RCPP
}
// spdt_cholesky_obj
List spdt_cholesky_obj(S4 x);
RcppExport SEXP _fastsparse_spdt_cholesky_obj(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< S4 >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(spdt_cholesky_obj(x));
    return rcpp_result_gen;
END_RCPP
}
// spdt_mul_vec
NumericVector spdt_mul_vec(NumericVector diag, NumericVector subDiag, NumericVector rhs, int nRhs);
RcppExport SEXP _fastsparse_spdt_mul_vec(SEXP diagSEXP, SEXP subDiagSEXP, SEXP rhsSEXP, SEXP nRhsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type diag(diagSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type subDiag(subDiagSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rhs(rhsSEXP);
    Rcpp::traits::input_parameter< int >::type nRhs(nRhsSEXP);
    rcpp_result_gen = Rcpp::wrap(spdt_mul_vec(diag, subDiag, rhs, nRhs));
    return rcpp_result_gen;
END_RCPP
}
// spdt_mul_mat
NumericVector spdt_mul_mat(NumericVector diag, NumericVector subDiag, NumericMatrix rhs);
RcppExport SEXP _fastsparse_spdt_mul_mat(SEXP diagSEXP, SEXP subDiagSEXP, SEXP rhsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type diag(diagSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type subDiag(subDiagSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type rhs(rhsSEXP);
    rcpp_result_gen = Rcpp::wrap(spdt_mul_mat(diag, subDiag, rhs));
    return rcpp_result_gen;
END_RCPP
}
// spdt_ldl_solve_vec
NumericVector spdt_ldl_solve_vec(NumericVector diag, NumericVector subDiag, NumericVector rhs, int nRhs);
RcppExport SEXP _fastsparse_spdt_ldl_solve_vec(SEXP diagSEXP, SEXP subDiagSEXP, SEXP rhsSEXP, SEXP nRhsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type diag(diagSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type subDiag(subDiagSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rhs(rhsSEXP);
    Rcpp::traits::input_parameter< int >::type nRhs(nRhsSEXP);
    rcpp_result_gen = Rcpp::wrap(spdt_ldl_solve_vec(diag, subDiag, rhs, nRhs));
    return rcpp_result_gen;
END_RCPP
}
// spdt_ldl_solve_mat
NumericMatrix spdt_ldl_solve_mat(NumericVector diag, NumericVector subDiag, NumericMatrix rhs);
RcppExport SEXP _fastsparse_spdt_ldl_solve_mat(SEXP diagSEXP, SEXP subDiagSEXP, SEXP rhsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type diag(diagSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type subDiag(subDiagSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type rhs(rhsSEXP);
    rcpp_result_gen = Rcpp::wrap(spdt_ldl_solve_mat(diag, subDiag, rhs));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fastsparse_fast_add", (DL_FUNC) &_fastsparse_fast_add, 2},
    {"_fastsparse_fast_add2", (DL_FUNC) &_fastsparse_fast_add2, 2},
    {"_fastsparse_fast_add3", (DL_FUNC) &_fastsparse_fast_add3, 2},
    {"_fastsparse_fast_kronecker", (DL_FUNC) &_fastsparse_fast_kronecker, 2},
    {"_fastsparse_fast_kronecker_sym", (DL_FUNC) &_fastsparse_fast_kronecker_sym, 2},
    {"_fastsparse_spdt_cholesky", (DL_FUNC) &_fastsparse_spdt_cholesky, 2},
    {"_fastsparse_spdt_cholesky_obj", (DL_FUNC) &_fastsparse_spdt_cholesky_obj, 1},
    {"_fastsparse_spdt_mul_vec", (DL_FUNC) &_fastsparse_spdt_mul_vec, 4},
    {"_fastsparse_spdt_mul_mat", (DL_FUNC) &_fastsparse_spdt_mul_mat, 3},
    {"_fastsparse_spdt_ldl_solve_vec", (DL_FUNC) &_fastsparse_spdt_ldl_solve_vec, 4},
    {"_fastsparse_spdt_ldl_solve_mat", (DL_FUNC) &_fastsparse_spdt_ldl_solve_mat, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_fastsparse(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
